{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction resolveHostHeaderConfig(input) {\n  return input;\n}\n\nexports.resolveHostHeaderConfig = resolveHostHeaderConfig;\n\nexports.hostHeaderMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n\n        return tslib_1.__generator(this, function (_b) {\n          if (!protocol_http_1.HttpRequest.isInstance(args.request)) return [2\n          /*return*/\n          , next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a; //For H2 request, remove 'host' header and use ':authority' header instead\n          //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\"; //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n\n          return [2\n          /*return*/\n          , next(args)];\n        });\n      });\n    };\n  };\n};\n\nexports.hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  tags: [\"HOST\"]\n};\n\nexports.getHostHeaderPlugin = function (options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(exports.hostHeaderMiddleware(options), exports.hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}