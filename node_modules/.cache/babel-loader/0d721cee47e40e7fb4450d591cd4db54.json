{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar signature_v4_1 = require(\"@aws-sdk/signature-v4\");\n\nvar constants_1 = require(\"./constants\");\n\nvar S3RequestPresigner =\n/** @class */\nfunction () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = tslib_1.__assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n\n    this.signer = new signature_v4_1.SignatureV4(resolvedOptions);\n  }\n\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _b = _a.unsignableHeaders,\n        unsignableHeaders = _b === void 0 ? new Set() : _b,\n        options = tslib_1.__rest(_a, [\"unsignableHeaders\"]);\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_c) {\n        unsignableHeaders.add(\"content-type\");\n        requestToSign.headers[constants_1.SHA256_HEADER] = constants_1.UNSIGNED_PAYLOAD;\n        return [2\n        /*return*/\n        , this.signer.presign(requestToSign, tslib_1.__assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders\n        }, options))];\n      });\n    });\n  };\n\n  return S3RequestPresigner;\n}();\n\nexports.S3RequestPresigner = S3RequestPresigner;","map":null,"metadata":{},"sourceType":"script"}