{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ModelPredicateCreator } from '../predicates';\nimport { QueryOne } from '../types';\nimport { SYNC } from '../util';\nimport { TransformerMutationType } from './utils'; // TODO: Persist deleted ids\n\nvar MutationEventOutbox =\n/** @class */\nfunction () {\n  function MutationEventOutbox(schema, namespaceResolver, MutationEvent, ownSymbol) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.MutationEvent = MutationEvent;\n    this.ownSymbol = ownSymbol;\n  }\n\n  MutationEventOutbox.prototype.enqueue = function (storage, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, predicate, _a, first, incomingMutationType, incomingConditionJSON, incomingCondition;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n            predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', mutationEvent.modelId).id('ne', _this.inProgressMutationEventId);\n            });\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, predicate)];\n\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 1]), first = _a[0];\n            if (!(first === undefined)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , storage.save(mutationEvent, undefined, this.ownSymbol)];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            incomingMutationType = mutationEvent.operation;\n            if (!(first.operation === TransformerMutationType.CREATE)) return [3\n            /*break*/\n            , 8];\n            if (!(incomingMutationType === TransformerMutationType.DELETE)) return [3\n            /*break*/\n            , 5]; // delete all for model\n\n            return [4\n            /*yield*/\n            , storage.delete(this.MutationEvent, predicate)];\n\n          case 4:\n            // delete all for model\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            // first gets updated with incoming's data, condition intentionally skiped\n            return [4\n            /*yield*/\n            , storage.save(this.MutationEvent.copyOf(first, function (draft) {\n              draft.data = mutationEvent.data;\n            }), undefined, this.ownSymbol)];\n\n          case 6:\n            // first gets updated with incoming's data, condition intentionally skiped\n            _b.sent();\n\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 12];\n\n          case 8:\n            incomingConditionJSON = mutationEvent.condition;\n            incomingCondition = JSON.parse(incomingConditionJSON);\n            if (!(Object.keys(incomingCondition).length === 0)) return [3\n            /*break*/\n            , 10]; // delete all for model\n\n            return [4\n            /*yield*/\n            , storage.delete(this.MutationEvent, predicate)];\n\n          case 9:\n            // delete all for model\n            _b.sent();\n\n            _b.label = 10;\n\n          case 10:\n            // Enqueue new one\n            return [4\n            /*yield*/\n            , storage.save(mutationEvent, undefined, this.ownSymbol)];\n\n          case 11:\n            // Enqueue new one\n            _b.sent();\n\n            _b.label = 12;\n\n          case 12:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.dequeue = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.peek(storage)];\n\n          case 1:\n            head = _a.sent();\n            return [4\n            /*yield*/\n            , storage.delete(head)];\n\n          case 2:\n            _a.sent();\n\n            this.inProgressMutationEventId = undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n  /**\n   * Doing a peek() implies that the mutation goes \"inProgress\"\n   *\n   * @param storage\n   */\n\n\n  MutationEventOutbox.prototype.peek = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.queryOne(this.MutationEvent, QueryOne.FIRST)];\n\n          case 1:\n            head = _a.sent();\n            this.inProgressMutationEventId = head ? head.id : undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getForModel = function (storage, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, mutationEvents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models.MutationEvent;\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', model.id);\n            }))];\n\n          case 1:\n            mutationEvents = _a.sent();\n            return [2\n            /*return*/\n            , mutationEvents];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getModelIds = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEvents, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent)];\n\n          case 1:\n            mutationEvents = _a.sent();\n            result = new Set();\n            mutationEvents.forEach(function (_a) {\n              var modelId = _a.modelId;\n              return result.add(modelId);\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  return MutationEventOutbox;\n}();\n\nexport { MutationEventOutbox };","map":null,"metadata":{},"sourceType":"module"}