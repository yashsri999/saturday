{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction applyMd5BodyChecksumMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e, _f, _g;\n\n        return tslib_1.__generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              request = args.request;\n              if (!protocol_http_1.HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 2];\n              body = request.body, headers = request.headers;\n              if (!!hasHeader(\"Content-MD5\", headers)) return [3\n              /*break*/\n              , 2];\n              digest = void 0;\n\n              if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {\n                hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n              } else {\n                digest = options.streamHasher(options.md5, body);\n              }\n\n              _a = [tslib_1.__assign({}, request)];\n              _b = {};\n              _c = [tslib_1.__assign({}, headers)];\n              _d = {};\n              _e = \"Content-MD5\";\n              _g = (_f = options).base64Encoder;\n              return [4\n              /*yield*/\n              , digest];\n\n            case 1:\n              request = tslib_1.__assign.apply(void 0, _a.concat([(_b.headers = tslib_1.__assign.apply(void 0, _c.concat([(_d[_e] = _g.apply(_f, [_h.sent()]), _d)])), _b)]));\n              _h.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\n\nexports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;\nexports.applyMd5BodyChecksumMiddlewareOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"]\n};\n\nexports.getApplyMd5BodyChecksumPlugin = function (config) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);\n    }\n  };\n};\n\nfunction hasHeader(soughtHeader, headers) {\n  var e_1, _a;\n\n  soughtHeader = soughtHeader.toLowerCase();\n\n  try {\n    for (var _b = tslib_1.__values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (soughtHeader === headerName.toLowerCase()) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}