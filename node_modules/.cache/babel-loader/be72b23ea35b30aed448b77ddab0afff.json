{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport Auth from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, TransformerMutationType } from '../utils';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema) {\n    this.schema = schema;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload) {\n    var _a = this.getAuthorizationInfo(model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload) || {},\n        authMode = _a.authMode,\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var result;\n    var rules = getAuthorizationRules(model, transformerMutationType); // check if has apiKey and public authorization\n\n    var apiKeyAuth = rules.find(function (rule) {\n      return rule.authStrategy === 'public' && rule.provider === 'apiKey';\n    });\n\n    if (apiKeyAuth) {\n      return {\n        authMode: GRAPHQL_AUTH_MODE.API_KEY,\n        isOwner: false\n      };\n    } // check if has iam authorization\n\n\n    if (userCredentials === USER_CREDENTIALS.unauth || userCredentials === USER_CREDENTIALS.auth) {\n      var iamPublicAuth = rules.find(function (rule) {\n        return rule.authStrategy === 'public' && rule.provider === 'iam';\n      });\n\n      if (iamPublicAuth) {\n        return {\n          authMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n          isOwner: false\n        };\n      }\n\n      var iamPrivateAuth = userCredentials === USER_CREDENTIALS.auth && rules.find(function (rule) {\n        return rule.authStrategy === 'private' && rule.provider === 'iam';\n      });\n\n      if (iamPrivateAuth) {\n        return {\n          authMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n          isOwner: false\n        };\n      }\n    } // if not check if has groups authorization and token has groupClaim allowed for cognito token\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'group' && rule.provider === 'userPools';\n    });\n    var validCognitoGroup = groupAuthRules.find(function (groupAuthRule) {\n      // validate token agains groupClaim\n      var userGroups = cognitoTokenPayload[groupAuthRule.groupClaim] || [];\n      return userGroups.find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validCognitoGroup) {\n      return {\n        authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n        isOwner: false\n      };\n    } // if not check if has groups authorization and token has groupClaim allowed for oidc token\n\n\n    groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'group' && rule.provider === 'oidc';\n    });\n    var validOidcGroup = groupAuthRules.find(function (groupAuthRule) {\n      // validate token agains groupClaim\n      var userGroups = oidcTokenPayload[groupAuthRule.groupClaim] || [];\n      userGroups.find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validOidcGroup) {\n      return {\n        authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n        isOwner: false\n      };\n    } // check if has owner auth authorization and token ownerField for cognito token\n\n\n    var ownerAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    });\n    ownerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        result = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (result) {\n      return result;\n    } // check if has owner auth authorization and token ownerField for oidc token\n\n\n    ownerAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    });\n    ownerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        result = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (result) {\n      return result;\n    }\n\n    return null;\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      var subscriptions = [];\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, federatedInfo, token, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , Auth.currentCredentials()];\n\n              case 1:\n                credentials = _a.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _a.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _a.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , Auth.currentSession()];\n\n              case 4:\n                session = _a.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _a.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _a.trys.push([6, 8,, 9]);\n\n                return [4\n                /*yield*/\n                , Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _a.sent();\n                token = federatedInfo.token;\n                payload = token.split('.')[1];\n                oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                return [3\n                /*break*/\n                , 9];\n\n              case 8:\n                err_3 = _a.sent();\n                return [3\n                /*break*/\n                , 9];\n\n              case 9:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var queriesMetadata;\n\n                      var _this = this;\n\n                      return __generator(this, function (_a) {\n                        queriesMetadata = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE].map(function (op) {\n                          return _this.buildSubscription(namespace, modelDefinition, op, userCredentials, cognitoTokenPayload, oidcTokenPayload);\n                        });\n                        queriesMetadata.forEach(function (_a) {\n                          var transformerMutationType = _a.opType,\n                              opName = _a.opName,\n                              query = _a.query,\n                              isOwner = _a.isOwner,\n                              ownerField = _a.ownerField,\n                              ownerValue = _a.ownerValue,\n                              authMode = _a.authMode;\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var variables, queryObservable, subscriptionReadyCallback;\n\n                            var _this = this;\n\n                            return __generator(this, function (_b) {\n                              variables = {};\n\n                              if (isOwner) {\n                                if (!ownerValue) {\n                                  // Check if there is an owner field, check where this error should be located\n                                  observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                  return [2\n                                  /*return*/\n                                  ];\n                                }\n\n                                variables[ownerField] = ownerValue;\n                              }\n\n                              queryObservable = API.graphql(__assign({\n                                query: query,\n                                variables: variables\n                              }, {\n                                authMode: authMode\n                              }));\n                              subscriptions.push(queryObservable.map(function (_a) {\n                                var value = _a.value;\n                                return value;\n                              }).subscribe({\n                                next: function next(_a) {\n                                  var data = _a.data,\n                                      errors = _a.errors;\n\n                                  if (Array.isArray(errors) && errors.length > 0) {\n                                    var messages = errors.map(function (_a) {\n                                      var message = _a.message;\n                                      return message;\n                                    });\n                                    logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                    _this.drainBuffer();\n\n                                    return;\n                                  }\n\n                                  var _b = opName,\n                                      record = data[_b];\n\n                                  _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n\n                                  _this.drainBuffer();\n                                },\n                                error: function error(subscriptionError) {\n                                  var _a = subscriptionError.error,\n                                      _b = __read((_a === void 0 ? {\n                                    errors: []\n                                  } : _a).errors, 1),\n                                      _c = _b[0],\n                                      _d = (_c === void 0 ? {} : _c).message,\n                                      message = _d === void 0 ? '' : _d;\n\n                                  logger.warn(message);\n\n                                  if (typeof subscriptionReadyCallback === 'function') {\n                                    subscriptionReadyCallback();\n                                  }\n                                }\n                              }));\n                              promises.push(function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var boundFunction;\n\n                                  var _this = this;\n\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4\n                                        /*yield*/\n                                        , new Promise(function (res) {\n                                          subscriptionReadyCallback = res;\n                                          boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                          Hub.listen('api', boundFunction);\n                                        })];\n\n                                      case 1:\n                                        _a.sent();\n\n                                        Hub.remove('api', boundFunction);\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              }());\n                              return [2\n                              /*return*/\n                              ];\n                            });\n                          });\n                        });\n                        return [2\n                        /*return*/\n                        ];\n                      });\n                    });\n                  });\n                });\n                Promise.all(promises).then(function () {\n                  return observer.next(CONTROL_MSG.CONNECTED);\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return function () {\n        _this.dataObserver = null;\n      };\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":null,"metadata":{},"sourceType":"module"}