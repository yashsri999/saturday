{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getChunkedStream(source) {\n  var sourceReader = source.getReader();\n  var currentMessageTotalLength = 0;\n  var currentMessagePendingLength = 0;\n  var currentMessage = null;\n  var messageLengthBuffer = null;\n\n  var allocateMessage = function allocateMessage(size) {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    var currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  var chunkedStream = new ReadableStream({\n    start: function start(controller) {\n      function push() {\n        return sourceReader.read().then(function (_a) {\n          var done = _a.done,\n              value = _a.value;\n\n          if (done) {\n            if (currentMessageTotalLength) {\n              if (currentMessageTotalLength === currentMessagePendingLength) {\n                controller.enqueue(currentMessage);\n              } else {\n                throw new Error(\"Truncated event message received.\");\n              }\n            }\n\n            controller.close();\n            return;\n          } // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n\n\n          var chunkLength = value.length;\n          var currentOffset = 0;\n\n          while (currentOffset < chunkLength) {\n            // create new message if necessary\n            if (!currentMessage) {\n              // working on a new message, determine total length\n              var bytesRemaining = chunkLength - currentOffset; // prevent edge case where total length spans 2 chunks\n\n              if (!messageLengthBuffer) {\n                messageLengthBuffer = new Uint8Array(4);\n              }\n\n              var numBytesForTotal = Math.min(4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n              bytesRemaining // bytes left in chunk\n              );\n              messageLengthBuffer.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n              value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n              currentMessagePendingLength += numBytesForTotal;\n              currentOffset += numBytesForTotal;\n\n              if (currentMessagePendingLength < 4) {\n                // not enough information to create the current message\n                break;\n              }\n\n              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n              messageLengthBuffer = null;\n            } // write data into current message\n\n\n            var numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n            chunkLength - currentOffset // number of bytes left in the original chunk\n            );\n            currentMessage.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n            currentMessagePendingLength += numBytesToWrite;\n            currentOffset += numBytesToWrite; // check if a message is ready to be pushed\n\n            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n              // push out the message\n              controller.enqueue(currentMessage); // cleanup\n\n              currentMessage = null;\n              currentMessageTotalLength = 0;\n              currentMessagePendingLength = 0;\n            }\n          }\n\n          push();\n        });\n      }\n\n      push();\n    }\n  });\n  return chunkedStream;\n}\n\nexports.getChunkedStream = getChunkedStream;","map":null,"metadata":{},"sourceType":"script"}