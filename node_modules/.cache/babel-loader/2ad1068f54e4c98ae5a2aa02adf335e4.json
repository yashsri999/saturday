{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nfunction normalizeEndpoint(endpoint, urlParser) {\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n\n  return endpoint;\n}\n\nexports.normalizeEndpoint = normalizeEndpoint;\n\nfunction resolveEndpointsConfig(input) {\n  var _this = this;\n\n  var tls = input.tls === undefined ? true : input.tls;\n  var endpoint = input.endpoint ? normalizeEndpoint(input.endpoint, input.urlParser) : function () {\n    return input.region().then(function (region) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var hostname, endpoint;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , input.regionInfoProvider(region)];\n\n            case 1:\n              hostname = (_a.sent() || {}).hostname;\n\n              if (!hostname) {\n                throw new Error(\"Cannot resolve hostname from client config\");\n              }\n\n              endpoint = input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname);\n              return [2\n              /*return*/\n              , endpoint];\n          }\n        });\n      });\n    });\n  };\n  return tslib_1.__assign(tslib_1.__assign({}, input), {\n    endpoint: endpoint,\n    tls: tls\n  });\n}\n\nexports.resolveEndpointsConfig = resolveEndpointsConfig;","map":null,"metadata":{},"sourceType":"script"}