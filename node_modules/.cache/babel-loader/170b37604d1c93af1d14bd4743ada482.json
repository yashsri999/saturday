{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getEventMessageStream(chunkedStream, eventMarshaller) {\n  var chunkReader = chunkedStream.getReader();\n  var messageStream = new ReadableStream({\n    start: function start(controller) {\n      function push() {\n        chunkReader.read().then(function (_a) {\n          var _b, _c;\n\n          var done = _a.done,\n              value = _a.value;\n\n          if (done) {\n            controller.close();\n            return;\n          } // @ts-ignore: error TS2345: Argument of type 'Uint8Array | undefined'\n          // is not assignable to parameter of type 'ArrayBufferView'\n\n\n          var message = eventMarshaller.unmarshall(value);\n          var messageType = message.headers[\":message-type\"].value;\n\n          if (messageType === \"error\") {\n            // Unmodeled exception in event\n            var unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            controller.error(unmodeledError);\n          } else if (messageType === \"exception\") {\n            // throw this.exceptionsDeserializer(message);\n            controller.enqueue((_b = {}, _b[message.headers[\":exception-type\"].value] = message, _b));\n          } else if (messageType === \"event\") {\n            controller.enqueue((_c = {}, _c[message.headers[\":event-type\"].value] = message, _c));\n          } else {\n            controller.error(new Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value));\n          }\n\n          push();\n        });\n      }\n\n      push();\n    }\n  });\n  return messageStream;\n}\n\nexports.getEventMessageStream = getEventMessageStream;","map":null,"metadata":{},"sourceType":"script"}