{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1_1DeleteLexiconCommand = function serializeAws_restJson1_1DeleteLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1DescribeVoicesCommand = function serializeAws_restJson1_1DescribeVoicesCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/voices\";\n          query = __assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.IncludeAdditionalLanguageCodes !== undefined && {\n            IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString()\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1GetLexiconCommand = function serializeAws_restJson1_1GetLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1GetSpeechSynthesisTaskCommand = function serializeAws_restJson1_1GetSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n\n          if (input.TaskId !== undefined) {\n            labelValue = input.TaskId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TaskId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1ListLexiconsCommand = function serializeAws_restJson1_1ListLexiconsCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/lexicons\";\n          query = __assign({}, input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1ListSpeechSynthesisTasksCommand = function serializeAws_restJson1_1ListSpeechSynthesisTasksCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          query = __assign(__assign(__assign({}, input.MaxResults !== undefined && {\n            MaxResults: input.MaxResults.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          }), input.Status !== undefined && {\n            Status: input.Status\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1PutLexiconCommand = function serializeAws_restJson1_1PutLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Content !== undefined && {\n            Content: input.Content\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1StartSpeechSynthesisTaskCommand = function serializeAws_restJson1_1StartSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && {\n            LexiconNames: serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && {\n            OutputFormat: input.OutputFormat\n          }), input.OutputS3BucketName !== undefined && {\n            OutputS3BucketName: input.OutputS3BucketName\n          }), input.OutputS3KeyPrefix !== undefined && {\n            OutputS3KeyPrefix: input.OutputS3KeyPrefix\n          }), input.SampleRate !== undefined && {\n            SampleRate: input.SampleRate\n          }), input.SnsTopicArn !== undefined && {\n            SnsTopicArn: input.SnsTopicArn\n          }), input.SpeechMarkTypes !== undefined && {\n            SpeechMarkTypes: serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && {\n            Text: input.Text\n          }), input.TextType !== undefined && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1_1SynthesizeSpeechCommand = function serializeAws_restJson1_1SynthesizeSpeechCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"Content-Type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/speech\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && {\n            LexiconNames: serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && {\n            OutputFormat: input.OutputFormat\n          }), input.SampleRate !== undefined && {\n            SampleRate: input.SampleRate\n          }), input.SpeechMarkTypes !== undefined && {\n            SpeechMarkTypes: serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && {\n            Text: input.Text\n          }), input.TextType !== undefined && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1_1DeleteLexiconCommand = function deserializeAws_restJson1_1DeleteLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1DeleteLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"DeleteLexiconOutput\"\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1DeleteLexiconCommandError = function deserializeAws_restJson1_1DeleteLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1DescribeVoicesCommand = function deserializeAws_restJson1_1DescribeVoicesCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1DescribeVoicesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"DescribeVoicesOutput\",\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1_1VoiceList(data.Voices, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1DescribeVoicesCommandError = function deserializeAws_restJson1_1DescribeVoicesCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1GetLexiconCommand = function deserializeAws_restJson1_1GetLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1GetLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"GetLexiconOutput\",\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1_1Lexicon(data.Lexicon, context);\n          }\n\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1_1LexiconAttributes(data.LexiconAttributes, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1GetLexiconCommandError = function deserializeAws_restJson1_1GetLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1GetSpeechSynthesisTaskCommand = function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"GetSpeechSynthesisTaskOutput\",\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError = function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, parsedBody, message;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n          }\n\n          return [3\n          /*break*/\n          , 8];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1ListLexiconsCommand = function deserializeAws_restJson1_1ListLexiconsCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1ListLexiconsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"ListLexiconsOutput\",\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1_1LexiconDescriptionList(data.Lexicons, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1ListLexiconsCommandError = function deserializeAws_restJson1_1ListLexiconsCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1ListSpeechSynthesisTasksCommand = function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"ListSpeechSynthesisTasksOutput\",\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1_1SynthesisTasks(data.SynthesisTasks, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError = function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1PutLexiconCommand = function deserializeAws_restJson1_1PutLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1PutLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"PutLexiconOutput\"\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1PutLexiconCommandError = function deserializeAws_restJson1_1PutLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _l.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n          }\n\n          return [3\n          /*break*/\n          , 16];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidLexiconExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1StartSpeechSynthesisTaskCommand = function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"StartSpeechSynthesisTaskOutput\",\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError = function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;\n\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _r.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n\n            case \"com.amazonaws.parrot.v1#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n          }\n\n          return [3\n          /*break*/\n          , 26];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 16:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 18:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 20:\n          _o = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 22:\n          _p = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 24:\n          _q = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1_1SynthesizeSpeechCommand = function deserializeAws_restJson1_1SynthesizeSpeechCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 400) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        __type: \"SynthesizeSpeechOutput\",\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n\n      data = output.body;\n      contents.AudioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1SynthesizeSpeechCommandError = function deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;\n\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.parrot.v1#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n          }\n\n          return [3\n          /*break*/\n          , 20];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 16:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 18:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1EngineNotSupportedExceptionResponse = function deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidLexiconExceptionResponse = function deserializeAws_restJson1_1InvalidLexiconExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidNextTokenExceptionResponse = function deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidS3BucketExceptionResponse = function deserializeAws_restJson1_1InvalidS3BucketExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidS3KeyExceptionResponse = function deserializeAws_restJson1_1InvalidS3KeyExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSampleRateExceptionResponse = function deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse = function deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSsmlExceptionResponse = function deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidTaskIdExceptionResponse = function deserializeAws_restJson1_1InvalidTaskIdExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse = function deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconNotFoundExceptionResponse = function deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse = function deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse = function deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse = function deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse = function deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1ServiceFailureExceptionResponse = function deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse = function deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse = function deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1TextLengthExceededExceptionResponse = function deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse = function deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse = function deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1_1LexiconNameList = function serializeAws_restJson1_1LexiconNameList(input, context) {\n  return input.map(function (entry) {\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1_1SpeechMarkTypeList = function serializeAws_restJson1_1SpeechMarkTypeList(input, context) {\n  return input.map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1EngineList = function deserializeAws_restJson1_1EngineList(output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1LanguageCodeList = function deserializeAws_restJson1_1LanguageCodeList(output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1Lexicon = function deserializeAws_restJson1_1Lexicon(output, context) {\n  return {\n    __type: \"Lexicon\",\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1_1LexiconAttributes = function deserializeAws_restJson1_1LexiconAttributes(output, context) {\n  return {\n    __type: \"LexiconAttributes\",\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified: output.LastModified !== undefined && output.LastModified !== null ? new Date(Math.round(output.LastModified * 1000)) : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined\n  };\n};\n\nvar deserializeAws_restJson1_1LexiconDescription = function deserializeAws_restJson1_1LexiconDescription(output, context) {\n  return {\n    __type: \"LexiconDescription\",\n    Attributes: output.Attributes !== undefined && output.Attributes !== null ? deserializeAws_restJson1_1LexiconAttributes(output.Attributes, context) : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1_1LexiconDescriptionList = function deserializeAws_restJson1_1LexiconDescriptionList(output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1LexiconDescription(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconNameList = function deserializeAws_restJson1_1LexiconNameList(output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1SpeechMarkTypeList = function deserializeAws_restJson1_1SpeechMarkTypeList(output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1SynthesisTask = function deserializeAws_restJson1_1SynthesisTask(output, context) {\n  return {\n    __type: \"SynthesisTask\",\n    CreationTime: output.CreationTime !== undefined && output.CreationTime !== null ? new Date(Math.round(output.CreationTime * 1000)) : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames: output.LexiconNames !== undefined && output.LexiconNames !== null ? deserializeAws_restJson1_1LexiconNameList(output.LexiconNames, context) : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters: output.RequestCharacters !== undefined && output.RequestCharacters !== null ? output.RequestCharacters : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes: output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null ? deserializeAws_restJson1_1SpeechMarkTypeList(output.SpeechMarkTypes, context) : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason: output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined\n  };\n};\n\nvar deserializeAws_restJson1_1SynthesisTasks = function deserializeAws_restJson1_1SynthesisTasks(output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1SynthesisTask(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1_1Voice = function deserializeAws_restJson1_1Voice(output, context) {\n  return {\n    __type: \"Voice\",\n    AdditionalLanguageCodes: output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null ? deserializeAws_restJson1_1LanguageCodeList(output.AdditionalLanguageCodes, context) : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines: output.SupportedEngines !== undefined && output.SupportedEngines !== null ? deserializeAws_restJson1_1EngineList(output.SupportedEngines, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1_1VoiceList = function deserializeAws_restJson1_1VoiceList(output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1Voice(entry, context);\n  });\n};\n\nvar deserializeMetadata = function deserializeMetadata(output) {\n  return {\n    httpStatusCode: output.statusCode,\n    httpHeaders: output.headers,\n    requestId: output.headers[\"x-amzn-requestid\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function collectBody(streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function collectBodyString(streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function isSerializableHeaderValue(value) {\n  return value !== undefined && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function parseBody(streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function loadRestJsonErrorCode(output, data) {\n  var findKey = function findKey(object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function sanitizeErrorCode(rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":null,"metadata":{},"sourceType":"module"}