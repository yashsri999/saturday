{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar bucketHostname_1 = require(\"./bucketHostname\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction bucketEndpointMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, _a, hostname, bucketEndpoint;\n\n        return tslib_1.__generator(this, function (_b) {\n          bucketName = args.input.Bucket;\n          replaceBucketInPath = options.bucketEndpoint;\n          request = args.request;\n\n          if (protocol_http_1.HttpRequest.isInstance(request)) {\n            if (options.bucketEndpoint) {\n              request.hostname = bucketName;\n            } else {\n              _a = bucketHostname_1.bucketHostname({\n                bucketName: bucketName,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\"\n              }), hostname = _a.hostname, bucketEndpoint = _a.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n            }\n\n            if (replaceBucketInPath) {\n              request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n              if (request.path === \"\") {\n                request.path = \"/\";\n              }\n            }\n          }\n\n          return [2\n          /*return*/\n          , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\n\nexports.bucketEndpointMiddleware = bucketEndpointMiddleware;\nexports.bucketEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\"\n};\n\nexports.getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), exports.bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}